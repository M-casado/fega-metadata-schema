# ----------------------------------------------------------------------
# Validate FEGA metadata
#
# Goal
# ----
# - Launch a local Biovalidator instance that uses **the current branch's**
#   JSON Schemas (`./schemas/**/*.json`).
# - Run the Python helper (scripts/py/validate_metadata.py) against every
#   example under ./data to confirm the changes remain valid.
#
# What it catches
# ---------------
# 1. Schemas that no longer compile or reference each other correctly.
# 2. Example JSON documents that would fail against changes in the schemas.
#
# Trigger
# -------
# - Any PR that touches JSON files, schemas, scripts/, or workflow files.
# - Direct pushes to `main`
#
# Outcome
# -------
# - Fails the job (and therefore blocks the merge) if:
#     – Biovalidator cannot start
#     – The validator script reports at least one failed JSON
# - Always uploads `summary.json` so we can inspect failures.
# ----------------------------------------------------------------------
name: |
  [REQUIRED] Validate FEGA (meta)data (deploying local biovalidator)

on:
  pull_request:
    paths:
      - '**/*.json'
      - 'schemas/**'
      - 'scripts/**'
      - '.github/workflows/**'
  push:
    branches: [ main ]

  workflow_dispatch:
    inputs:
      schemas_ref:
        description: |
          Specify the branch (e.g., dev), tag (e.g., v1.3.11) or commit (e.g., 5fad895) to use as source (both JSON Schemas and JSON documents) for validation
        type: string
        required: true
        default: main

jobs:
  validate-json-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: "Checkout (trigger: PR / push)"
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/checkout@v4

      - name: "Checkout (trigger: manual run)"
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.schemas_ref }}   # The value given at the "Run workflow" form as a string

      # --------------------------------------------------------------
      # Environment: cache Python wheels & npm packages for speed
      # --------------------------------------------------------------
      - name: Cache pip
        uses: actions/cache@v4
        with:
          # On subsequent runs, if the cache key matches (i.e., operating system and the hash of the requirements.txt file),
          #   the dependencies are restored from the cache instead of being downloaded and installed again.
          path: ~/.cache/pip
          # combines the OS type and a hash of the requirements.txt file: the cache is specific to the dependencies listed
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      # --------------------------------------------------------------
      # Tooling: Node (Biovalidator) + Python
      # --------------------------------------------------------------
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Biovalidator (dev branch)
        run: |
          # Pull the code directly from GitHub's dev branch
          npm install -g "github:elixir-europe/biovalidator#dev"
          # Consider auditing the issues if there are lots:
          # npm audit fix

      - name: Launch Biovalidator
        run: |
          node "$(npm root -g)/biovalidator/src/biovalidator.js" \
            --port 3020 \
            --ref "./schemas/**/*.json" \
            > biovalidator.log 2>&1 &
          echo $! > biovalidator.pid

      - name: Wait for Biovalidator to be ready
        run: |
          for i in {1..12}; do
            if curl --output /dev/null --silent --head --fail "http://localhost:3020/validate"; then
              echo "Biovalidator is up"
              exit 0
            fi
            echo "Waiting ($i/12 time(s)) for Biovalidator server to start..."
            sleep 5
          done
          echo "Biovalidator did not start in time" >&2
          exit 1

      - name: Show Biovalidator log (on failure)
        if: failure()
        run: |
          echo "=== biovalidator.log ==="
          if [ -f biovalidator.log ]; then
            cat biovalidator.log
          else
            echo "'biovalidator.log' not found"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # We'll use the latest version of python from major 3 release
          python-version: '3.x'
          cache: 'pip'

      - name: Install Python requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install repo in editable mode
        run: pip install -e .[dev]

      # --------------------------------------------------------------
      # Validation
      # --------------------------------------------------------------
      - name: Validate JSON examples
        run: |
          script_path="scripts/py/validate_metadata.py"
          data_path="data"
          url="http://localhost:3020/validate"
          python $script_path $data_path --url $url > summary.json

      - name: Show summary in log
        if: always()
        run: |
          if [ -f summary.json ]; then
            cat summary.json
          else
            echo "'summary.json' not found"
          fi

      # --------------------------------------------------------------
      # Artifacts & teardown
      # --------------------------------------------------------------
      # We upload the artifact so we can download the validation summary
      #   even after the logs disappear, and any other tool can access it
      #   easily.
      - name: Upload validation summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-summary
          path: summary.json
          if-no-files-found: warn

      - name: Stop Biovalidator
        if: always()
        run: |
          if [ -f biovalidator.pid ]; then
            # If it was already killed, exit with true
            kill "$(cat biovalidator.pid)" || true
          fi
